name: "Deploy on Comment"

# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
on:
  issue_comment:
    types: [created]

jobs:
  deploy:
    name: Deploy
    # Only run if it#s a PR and the comment contains /deploy
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/deploy')
    runs-on: ubuntu-latest

    steps:
      - name: Get branch of PR
        uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch

      - name: Set latest commit status as pending
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending

      - name: Checkout PR branch ${{ steps.comment-branch.outputs.head_ref }}
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - name: Setup Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Do the actual deployment (exit randomly with 0 or 1)
      - name: Deploy
        run: |
          echo "Deploying..."
          exit $(($RANDOM%2))

      - name: Add workflow result as comment on PR
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const name = '${{ github.workflow	}}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const success = '${{ job.status }}' === 'success';
            const body = `${name}: ${success ? 'succeeded ✅' : 'failed ❌'}\n${url}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

      - name: Set latest commit status as ${{ job.status }}
        uses: myrotvorets/set-commit-status-action@master
        if: always()
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}

#        run: |
#          # Check if comment contains "Create state machine screenshot"
#          if [[ "${{ github.event.comment.body }}" =~ "Create state machine screenshot" ]]; then
#            # Find all JavaScript and TypeScript files in the issue
#            code_files=$(git diff --name-only origin/main...HEAD -- '*.js' '*.ts')
#            head_check=$(HEAD)
#            echo "$head_check"
#            # Output list of files being checked
#            echo "Checking the following files:"
#            echo "$code_files"
#            # Check for the presence of a state machine in each file
#            for file in $code_files; do
#              if grep -q "createMachine" "$file"; then
#                echo "State machine found in $file"
#                exit 1
#              fi
#            done
#          fi
